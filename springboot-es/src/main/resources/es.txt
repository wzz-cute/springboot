#查看所有节点
GET /_cat/nodes

#查看es健康状况
GET /_cat/health

#查看主节点信息
GET /_cat/master

#查询所有索引
GET /_cat/indices


#文档
#索引一个文档put请求  自带id 相同的话就是更新 同时版本信息上增
PUT /customer/external/1
{
  "name":"zhangsan"
}

#不带id 多次请求为新增，不会修改 随机id
#PUT可以新增也可以修改。PUT必须指定id；由于PUT需要指定id，我们一般用来做修改操作，不指定id会报错
POST /customer/external/
{
  "name":"lisi"
}

#查看文档
GET /customer/external/

#更新文档
#_update方式不会重复更新，数据已存在不会更新，版本号不会改变，另两种方式会重复更新（覆盖原来数据），版本号会改变
POST /customer/external/1/_update
{
  "doc": {
    "name":"list"
  }
}

#删除文档&索引
#删除文档
DELETE /customer/external/1

#删除索引
DELETE /customer
DELETE /newbank
DELETE /customer

#查询所有
GET /customer/_search
{
  "query": {
    "match_all": {}
  }
}

#指定索引和类型批量操作
POST /customer/external/_bulk
{"index":{"_id":"1"}}
{"name":"John Doe"}
{"index":{"_id":"2"}}
{"name":"John Doe"}

#批量导入测试数据
POST bank/account/_bulk
#https://blog.csdn.net/qq_41472891/article/details/121599647


#检索
# query 查询条件
# sort 排序条件
GET /bank/_search
{
  "query": {
    "match_all": {}
  }
  , "sort": [
    {
      "account_number": {
        "order": "asc"
      }
    }
  ]
}

#检索2
# match_all 查询类型【代表查询所有的所有】，es中可以在query中组合非常多的查询类型完成复杂查询；
# from+size 限定，完成分页功能；从第几条数据开始，每页有多少数据
# sort 排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准；
GET bank/_search
{
  "query": {
    "match_all": {}
  }
  , "from": 0
  , "size": 5
  , "sort": [
    {
      "account_number": {
        "order": "desc"
      }
      , "balance": {
        "order": "asc"
      }
    }
  ]
}


#返回部分字段
GET bank/_search
{
  "query": {
    "match_all": {}
  }
  , "from": 0
  , "size": 5
  , "sort": [
    {
      "account_number": {
        "order": "desc"
      }
    }
  ],
  "_source": ["balance","first_name"]
}


#match-匹配查询
#精确查询-基本数据类型(非文本)
# 查找匹配 account_number 为 20 的数据 非文本推荐使用 term
GET bank/_search
{
  "query": {
    "match": {
      "account_number": 20
    }
  }
}

#模糊查询-文本字符串
# 查找匹配 address 包含 mill 或 lane 的数据
GET bank/_search
{
  "query": {
    "match": {
      "address": "mill lane"
    }
  }
}


#精确匹配-文本字符串
# 查找 address 为 288 Mill Street 的数据。
# 这里的查找是精确查找，只有完全匹配时才会查找出存在的记录，
# 如果想模糊查询应该使用match_phrase 短语匹配
GET bank/_search
{
  "query": {
    "match": {
      "address.keyword": "288 Mill Street"
    }
  }
}

#match_phrase-短语匹配
#将需要匹配的值当成一整个单词（不分词）进行检索
# 这里会检索 address 匹配包含短语 mill lane 的数据
GET bank/_search
{
  "query": {
    "match_phrase": {
      "address": "mill lane"
    }
  }
}


#multi_math-多字段匹配
# 检索 city 或 address 匹配包含 mill 的数据，会对查询条件分词
GET bank/_search
{
  "query": {
    "multi_match": {
      "query": "mill",
      "fields": [
        "city",
        "address"
      ]
    }
  }
}


#bool-复合查询
#复合语句可以合并，任何其他查询语句，包括符合语句。这也就意味着，复合语句之间
#可以互相嵌套，可以表达非常复杂的逻辑。
#● must：必须达到must所列举的所有条件
#● must_not，必须不匹配must_not所列举的所有条件。
#● should，应该满足should所列举的条件。
# 查询 gender 为 M 且 address 包含 mill 的数据
GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "gender": "M"
          }
        },
        {
          "match": {
            "address": "mill"
          }
        }
      ]
    }
  }
}


#filter-结果过滤
# 这里先是查询所有匹配 address 包含 mill 的文档，
# 然后再根据 10000<=balance<=20000 进行过滤查询结果
GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "address": "mill"
          }
        }
      ]
      , "filter": {
        "range": {
          "balance": {
            "gte": "10000",
            "lte": "20000"
          }
        }
      }
    }
  }
}


#term-精确检索
# 查找 age 为 28 的数据
GET bank/_search
{
  "query": {
    "match": {
      "address": "Mill"
    },
    "term": {
      "age": "28"
    }
  }
}
GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "address": "Mill"
          }
        },
        {
          "term": {
            "age": "28"
          }
        }
      ]
    }
  }
}


#Aggregation-执行聚合
# "ageAgg": {   				  --- 聚合名为 ageAgg
#   "terms": {				    --- 聚合类型为 term
#     "field": "age",     --- 聚合字段为 age
#     "size": 10			    --- 取聚合后前十个数据
#   }
# },
# ------------------------
# "ageAvg": {   				  --- 聚合名为 ageAvg
#   "avg": {				      --- 聚合类型为 avg 求平均值
#     "field": "age"	    --- 聚合字段为 age
#   }
# },
# ------------------------
# "balanceAvg": {				  --- 聚合名为 balanceAvg
#   "avg": {				      --- 聚合类型为 avg 求平均值
#     "field": "balance"  --- 聚合字段为 balance
#   }
# }
# ------------------------
# "size": 0               --- 不显示命中结果，只看聚合信息
GET bank/_search
{
  "query": {
    "match": {
      "address": "Mill"
    }
  },
  "aggs": {
    "ageAgg": {
      "terms": {
        "field": "age",
        "size": 10
      }
    },
    "ageAvg": {
      "avg": {
        "field": "age"
      }
    },
    "balanceAvg": {
      "avg": {
        "field": "balance"
      }
    }
  },
  "size": 0
}


#按照年龄聚合，并且求这些年龄段的这些人的平均薪资
GET bank/_search
{
  "query": {
    "match_all": {}
  },
  "aggs": {
    "ageAgg": {
      "terms": {
        "field": "age",
        "size": 100
      },
      "aggs": {
        "ageAvg": {
          "avg": {
            "field": "balance"
          }
        }
      }
    }
  }
  , "size": 0
}


#查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资
GET bank/_search
{
  "query": {
    "match_all": {}
  },
  "aggs": {
    "ageAgg": {
      "terms": {
        "field": "age",
        "size": 100
      },
      "aggs": {
        "genderAgg": {
          "terms": {
            "field": "gender.keyword"
          },
          "aggs": {
            "balanceAvg": {
              "avg": {
                "field": "balance"
              }
            }
          }
        },
        "ageBalanceAvg": {
          "avg": {
            "field": "balance"
          }
        }
      }
    }
  },
  "size": 0
}
# "field": "gender.keyword" gender是txt没法聚合 必须加.keyword精确替代


GET /bank/_mapping

#创建新索引 newbank 并修改字段类型
PUT /newbank
{
  "mappings": {
    "properties": {
      "account_number": {
        "type": "long"
      },
      "address": {
        "type": "text"
      },
      "age": {
        "type": "integer"
      },
      "balance": {
        "type": "long"
      },
      "city": {
        "type": "keyword"
      },
      "email": {
        "type": "keyword"
      },
      "employer": {
        "type": "keyword"
      },
      "first_name": {
        "type": "text"
      },
      "gender": {
        "type": "keyword"
      },
      "last_name": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      },
      "state": {
        "type": "keyword"
      }
    }
  }
}


#数据迁移
POST _reindex
{
  "source": {
    "index": "bank",
    "type": "account"
  },
  "dest": {
    "index": "newbank"
  }
}

GET /newbank/_search
{
  "query": {
    "match_all": {}
  }
}